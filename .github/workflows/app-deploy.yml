# [x] Pull latest code from main/app
# [x] Run yarn install to download libraries
# [x] Get values for APPLE credentials
# [x] Pull certificates (Developer ID and Provisioning Profile)
# [x] Save Provisioning Profile in /app
# [x] Run yarn package to create a signed application
# [] Create a new release with .dmg and .zip files in switch-releases repository
# [] Create a pull request in switch-releases containing changes in updates.json and releases.json
# [] Update the release .dmg location in /site

name: app-deploy
on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: macos-latest
    env:
      WORKING_DIRECTORY: ./app
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Add Certificates to Keychain
        env:
          WORKING_DIRECTORY: ${{ env.WORKING_DIRECTORY }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_PROVISION_PROFILE: ${{ secrets.APPLE_PROVISION_PROFILE }}
          APPLE_SECRETS_PASSWORD: ${{ secrets.APPLE_SECRETS_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/Certificates.p12
          PP_PATH=$RUNNER_TEMP/Switch.provisionprofile
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$APPLE_CERTIFICATE" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$APPLE_PROVISION_PROFILE" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$APPLE_SECRETS_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$APPLE_SECRETS_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$APPLE_SECRETS_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # copy profile to working directory
          cp $PP_PATH ${{ env.WORKING_DIRECTORY }}

      - name: Install Dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: yarn install --frozen-lockfile

      - name: Run yarn package
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          export APPLE_ID=${{ secrets.APPLE_ID }}
          export APPLE_PASS=${{ secrets.APPLE_PASS }}
          export APPLE_TEAM_ID=${{ secrets.APPLE_TEAM_ID }}
          yarn package
