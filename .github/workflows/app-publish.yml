name: app-publish
on:
  workflow_dispatch:

jobs:
  package-app:
    runs-on: macos-latest
    env:
      WORKING_DIRECTORY: ./app
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Get Version
        id: get_version
        run: |
          VERSION=$(node -pe "require('${{ github.workspace }}/app/package.json').version")
          echo "::set-output name=version::$VERSION"

      - name: Add Certificates to Keychain
        run: |
          # set environment
          export WORKING_DIRECTORY=${{ env.WORKING_DIRECTORY }}
          export APPLE_CERTIFICATE=${{ secrets.APPLE_CERTIFICATE }}
          export APPLE_PROVISION_PROFILE=${{ secrets.APPLE_PROVISION_PROFILE }}
          export APPLE_SECRETS_PASSWORD=${{ secrets.APPLE_SECRETS_PASSWORD }}

          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/Certificates.p12
          PP_PATH=$RUNNER_TEMP/Switch.provisionprofile
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$APPLE_CERTIFICATE" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$APPLE_PROVISION_PROFILE" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$APPLE_SECRETS_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$APPLE_SECRETS_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$APPLE_SECRETS_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # copy profile to working directory
          cp $PP_PATH ${{ env.WORKING_DIRECTORY }}

      - name: Install Dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: yarn install --frozen-lockfile

      - name: Package
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          export GH_TOKEN=${{ secrets.GH_TOKEN }}
          export APPLE_ID=${{ secrets.APPLE_ID }}
          export APPLE_PASS=${{ secrets.APPLE_PASS }}
          export APPLE_TEAM_ID=${{ secrets.APPLE_TEAM_ID }}
          yarn package

      - name: Upload Artifact .dmg
        uses: actions/upload-artifact@v2
        with:
          name: dmg
          path: ${{ env.WORKING_DIRECTORY }}/packages/Switch-${{ steps.get_version.outputs.version }}.dmg

      - name: Upload Artifact .zip
        uses: actions/upload-artifact@v2
        with:
          name: zip
          path: ${{ env.WORKING_DIRECTORY }}/packages/Switch-${{ steps.get_version.outputs.version }}-mac.zip

  create-release:
    needs: package-app
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Get Version
        id: get_version
        run: |
          VERSION=$(node -pe "require('${{ github.workspace }}/app/package.json').version")
          echo "::set-output name=version::$VERSION"

      - name: Create Release
        run: |
          export GH_TOKEN=${{ secrets.GH_TOKEN }}
          VERSION=${{ steps.get_version.outputs.version }}
          RESPONSE=$(curl -sSL -H "Authorization: Bearer $GH_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"tag_name\": \"v$VERSION\", \"name\": \"Release v$VERSION\"}" \
            "https://api.github.com/repos/olafkotur/switch-releases/releases")
          RELEASE_ID=$(echo "$RESPONSE" | jq -r '.id')
          echo "::set-output name=release_id::$RELEASE_ID"

  upload-release:
    needs:
      - package-app
      - create-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Get Version
        id: get_version
        run: |
          VERSION=$(node -pe "require('${{ github.workspace }}/app/package.json').version")
          echo "::set-output name=version::$VERSION"

      - name: Download Artifact .dmg
        uses: actions/download-artifact@v2
        with:
          name: dmg
          path: ${{ github.workspace }}/artifacts/Switch-${{ steps.get_version.outputs.version }}.dmg

      - name: Download Artifact .zip
        uses: actions/download-artifact@v2
        with:
          name: zip
          path: ${{ github.workspace }}/artifacts/Switch-${{ steps.get_version.outputs.version }}-mac.zip

      - name: Upload .dmg file
        run: |
          export GH_TOKEN=${{ secrets.GH_TOKEN }}
          RELEASE_ID=${{ needs.create-release.outputs.release_id }}
          VERSION=${{ steps.get_version.outputs.version }}
          UPLOAD_URL="https://uploads.github.com/repos/olafkotur/switch-releases/releases/$RELEASE_ID/assets?name=Switch-$VERSION.dmg"
          curl -sSL -H "Authorization: Bearer $GH_TOKEN" \
            -H "Content-Type: application/octet-stream" \
            --data-binary @${{ github.workspace }}/artifacts/*.dmg \
            "$UPLOAD_URL"

      - name: Upload .zip file
        run: |
          export GH_TOKEN=${{ secrets.GH_TOKEN }}
          RELEASE_ID=${{ needs.create-release.outputs.release_id }}
          VERSION=${{ steps.get_version.outputs.version }}
          UPLOAD_URL="https://uploads.github.com/repos/olafkotur/switch-releases/releases/$RELEASE_ID/assets?name=Switch-$VERSION-mac.zip"
          curl -sSL -H "Authorization: Bearer $GH_TOKEN" \
            -H "Content-Type: application/octet-stream" \
            --data-binary @${{ github.workspace }}/artifacts/*.zip \
            "$UPLOAD_URL"

# still to do
# bump-release job
# bump-site job
# notify changes on discord
