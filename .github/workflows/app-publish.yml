# [x] Pull latest code from main/app
# [x] Run yarn install to download libraries
# [x] Get values for APPLE credentials
# [x] Pull certificates (Developer ID and Provisioning Profile)
# [x] Save Provisioning Profile in /app
# [x] Run yarn package to create a signed application
# [] Create a new release with .dmg and .zip files in switch-releases repository
# [] Create a pull request in switch-releases containing changes in updates.json and releases.json
# [] Update the release .dmg location in /site

name: app-publish
on:
  workflow_dispatch:

jobs:
  publish:
    runs-on: macos-latest
    env:
      WORKING_DIRECTORY: ./app
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      # - name: Add Certificates to Keychain
      #   run: |
      #     # set environment
      #     export WORKING_DIRECTORY=${{ env.WORKING_DIRECTORY }}
      #     export APPLE_CERTIFICATE=${{ secrets.APPLE_CERTIFICATE }}
      #     export APPLE_PROVISION_PROFILE=${{ secrets.APPLE_PROVISION_PROFILE }}
      #     export APPLE_SECRETS_PASSWORD=${{ secrets.APPLE_SECRETS_PASSWORD }}

      #     # create variables
      #     CERTIFICATE_PATH=$RUNNER_TEMP/Certificates.p12
      #     PP_PATH=$RUNNER_TEMP/Switch.provisionprofile
      #     KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

      #     # import certificate and provisioning profile from secrets
      #     echo -n "$APPLE_CERTIFICATE" | base64 --decode -o $CERTIFICATE_PATH
      #     echo -n "$APPLE_PROVISION_PROFILE" | base64 --decode -o $PP_PATH

      #     # create temporary keychain
      #     security create-keychain -p "$APPLE_SECRETS_PASSWORD" $KEYCHAIN_PATH
      #     security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
      #     security unlock-keychain -p "$APPLE_SECRETS_PASSWORD" $KEYCHAIN_PATH

      #     # import certificate to keychain
      #     security import $CERTIFICATE_PATH -P "$APPLE_SECRETS_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
      #     security list-keychain -d user -s $KEYCHAIN_PATH

      #     # copy profile to working directory
      #     cp $PP_PATH ${{ env.WORKING_DIRECTORY }}

      # - name: Install Dependencies
      #   working-directory: ${{ env.WORKING_DIRECTORY }}
      #   run: yarn install --frozen-lockfile

      # - name: Package
      #   working-directory: ${{ env.WORKING_DIRECTORY }}
      #   run: |
      #     export GH_TOKEN=${{ secrets.GH_TOKEN }}
      #     export APPLE_ID=${{ secrets.APPLE_ID }}
      #     export APPLE_PASS=${{ secrets.APPLE_PASS }}
      #     export APPLE_TEAM_ID=${{ secrets.APPLE_TEAM_ID }}
      #     yarn package

      # TODO: testing only
      - name: Create Dummy Files
        run: |
          mkdir -p ${{ env.WORKING_DIRECTORY }}/packages
          touch ${{ env.WORKING_DIRECTORY }}/packages/Switch-2.0.2.dmg
          touch ${{ env.WORKING_DIRECTORY }}/packages/Switch-2.0.2-mac.zip

      - name: Get Version
        id: get_version
        run: |
          export GH_TOKEN=${{ secrets.GH_TOKEN }}
          VERSION=$(node -pe "require('${{ env.WORKING_DIRECTORY }}/package.json').version")
          echo "::set-output name=version::$VERSION"

      - name: Create Release
        run: |
          export GH_TOKEN=${{ secrets.GH_TOKEN }}
          VERSION=${{ steps.get_version.outputs.version }}
          curl -sSL -H "Authorization: Bearer $GH_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"tag_name\": \"v$VERSION\", \"name\": \"Release v$VERSION\"}" \
            "https://api.github.com/repos/olafkotur/switch-releases/releases"

      - name: Get Release ID
        id: get_release_id
        run: |
          export GH_TOKEN=${{ secrets.GH_TOKEN }}
          VERSION=${{ steps.get_version.outputs.version }}
          RESPONSE=$(curl -sSL -H "Authorization: Bearer $GH_TOKEN" \
            "https://api.github.com/repos/olafkotur/switch-releases/releases/tags/v$VERSION")
          RELEASE_ID=$(echo "$RESPONSE" | jq -r '.id')
          echo "::set-output name=release_id::$RELEASE_ID"

      - name: Upload .dmg file
        run: |
          export GH_TOKEN=${{ secrets.GH_TOKEN }}
          RELEASE_ID=${{ steps.get_release_id.outputs.release_id }}
          VERSION=${{ steps.get_version.outputs.version }}
          UPLOAD_URL="https://uploads.github.com/repos/olafkotur/switch-releases/releases/$RELEASE_ID/assets?name=Switch-$VERSION.dmg"
          curl -sSL -H "Authorization: Bearer $GH_TOKEN" \
            -H "Content-Type: application/octet-stream" \
            --data-binary @${{ env.WORKING_DIRECTORY }}/packages/Switch-$VERSION.dmg \
            "$UPLOAD_URL"

      - name: Upload .zip file
        run: |
          export GH_TOKEN=${{ secrets.GH_TOKEN }}
          RELEASE_ID=${{ steps.get_release_id.outputs.release_id }}
          VERSION=${{ steps.get_version.outputs.version }}
          UPLOAD_URL="https://uploads.github.com/repos/olafkotur/switch-releases/releases/$RELEASE_ID/assets?name=Switch-$VERSION-mac.zip"
          curl -sSL -H "Authorization: Bearer $GH_TOKEN" \
            -H "Content-Type: application/octet-stream" \
            --data-binary @${{ env.WORKING_DIRECTORY }}/packages/Switch-$VERSION-mac.zip \
            "$UPLOAD_URL"
