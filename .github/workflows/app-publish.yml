name: app-publish
on:
  workflow_dispatch:

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Get Version
        id: get_version
        run: |
          VERSION=$(node -pe "require('${{ github.workspace }}/app/package.json').version")
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.VERSION }}
          release_name: Release v${{ env.VERSION }}
          draft: true
          prerelease: false

      - name: Set Release ID
        id: set_release_id
        uses: i3h/share-data@v1
        with:
          share-id: release_id
          mode: set
          key: release_id
          value: ${{ steps.create_release.outputs.id }}

  package-app:
    needs: create-release
    runs-on: macos-latest
    env:
      WORKING_DIRECTORY: ./app
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Get Version
        id: get_version
        run: |
          VERSION=$(node -pe "require('${{ github.workspace }}/app/package.json').version")
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Add Certificates to Keychain
        run: |
          # set environment
          export WORKING_DIRECTORY=${{ env.WORKING_DIRECTORY }}
          export APPLE_CERTIFICATE=${{ secrets.APPLE_CERTIFICATE }}
          export APPLE_PROVISION_PROFILE=${{ secrets.APPLE_PROVISION_PROFILE }}
          export APPLE_SECRETS_PASSWORD=${{ secrets.APPLE_SECRETS_PASSWORD }}

          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/Certificates.p12
          PP_PATH=$RUNNER_TEMP/Switch.provisionprofile
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$APPLE_CERTIFICATE" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$APPLE_PROVISION_PROFILE" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$APPLE_SECRETS_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$APPLE_SECRETS_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$APPLE_SECRETS_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # copy profile to working directory
          cp $PP_PATH ${{ env.WORKING_DIRECTORY }}

      - name: Install Dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: yarn install --frozen-lockfile

      - name: Package Application
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          export GH_TOKEN=${{ secrets.GH_TOKEN }}
          export APPLE_ID=${{ secrets.APPLE_ID }}
          export APPLE_PASS=${{ secrets.APPLE_PASS }}
          export APPLE_TEAM_ID=${{ secrets.APPLE_TEAM_ID }}
          yarn package

          mkdir -p $RUNNER_TEMP/artifacts
          cp ./packages/Switch-${{ env.VERSION }}.dmg $RUNNER_TEMP/artifacts/
          cp ./packages/Switch-${{ env.VERSION }}-mac.zip $RUNNER_TEMP/artifacts/

      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: release-assets
          path: $RUNNER_TEMP/artifacts

  publish-release:
    needs:
      - create-release
      - package-app
    runs-on: ubuntu-latest
    steps:
      - name: Get Release ID
        id: get_release_id
        uses: i3h/share-data@v1
        with:
          share-id: release_id
          mode: get
          key: release_id

      - name: Publish Release
        uses: StuYarrow/publish-release@v1.1.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          id: ${{ steps.get_release_id.outputs.data }}.

  upload-assets:
    needs:
      - create-release
      - package-app
      - publish-release
    runs-on: ubuntu-latest
    env:
      WORKING_DIRECTORY: ./app
      ASSET_DIRECTORY: ./app/release-assets
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Create Directory
        run: mkdir -p ${{ env.ASSET_DIRECTORY }}

      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: release-assets
          path: ${{ env.ASSET_DIRECTORY }}

      - name: Generate Release JSON
        run: node ./${{ env.WORKING_DIRECTORY }}/scripts/release.js

      - name: Upload to S3
        uses: shallwefootball/upload-s3-action@v1.3.3
        with:
          aws_key_id: ${{ secrets.AWS_ACCESS_KEY }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_bucket: switch-releases
          source_dir: ${{ env.ASSET_DIRECTORY }}
# https://github.com/marketplace/actions/create-release
# https://github.com/marketplace/actions/release-assets
# https://stackoverflow.com/questions/45240336/how-to-use-github-release-api-to-make-a-release-without-source-code
